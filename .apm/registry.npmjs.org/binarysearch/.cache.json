{"_id":"binarysearch","_rev":"27-7a2b552c1a34e4b4edb4a73ae8c493a6","name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","dist-tags":{"latest":"0.2.4"},"versions":{"0.1.0":{"name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","version":"0.1.0","repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"main":"index.js","scripts":{"test":"tap test/*.js"},"author":{"name":"Ryan Day","email":"soldair@gmail.com"},"dependencies":{},"devDependencies":{"tap":"~0.4.1"},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nnode-binarysearch\n=================\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to search value\n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\n\n```\n\nquery for range (inclusive)\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\nsearch with object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n// [{k:'b',v:11},{k:a,v:22}];\n\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","readmeFilename":"README.md","_id":"binarysearch@0.1.0","dist":{"shasum":"abd4dc5d9b6220f1e20273079f9778eb515cc28e","tarball":"http://registry.npmjs.org/binarysearch/-/binarysearch-0.1.0.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"soldair","email":"soldair@gmail.com"},"maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"directories":{}},"0.1.1":{"name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","version":"0.1.1","repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"main":"index.js","scripts":{"test":"tap test/*.js"},"author":{"name":"Ryan Day","email":"soldair@gmail.com"},"dependencies":{},"devDependencies":{"tap":"~0.4.1"},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nnode-binarysearch\n=================\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to search value\n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\n\n```\n\nquery for range (inclusive)\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\nsearch with object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n// [{k:'b',v:11},{k:a,v:22}];\n\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","readmeFilename":"README.md","_id":"binarysearch@0.1.1","dist":{"shasum":"082df2d71c98b42ac743662b11ce76686d7ed2f0","tarball":"http://registry.npmjs.org/binarysearch/-/binarysearch-0.1.1.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"soldair","email":"soldair@gmail.com"},"maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"directories":{}},"0.1.2":{"name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","version":"0.1.2","repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"main":"index.js","scripts":{"test":"tap test/*.js"},"author":{"name":"Ryan Day","email":"soldair@gmail.com"},"dependencies":{},"devDependencies":{"tap":"~0.4.1"},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nbinarysearch\n============\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to search value\n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\n\n```\n\nquery for range (inclusive)\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\nsearch with object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n// [{k:'b',v:11},{k:a,v:22}];\n\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","readmeFilename":"README.md","_id":"binarysearch@0.1.2","dist":{"shasum":"ae6e25954e5117ea3380ab20e832cb33312ddd28","tarball":"http://registry.npmjs.org/binarysearch/-/binarysearch-0.1.2.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"soldair","email":"soldair@gmail.com"},"maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"directories":{}},"0.1.3":{"name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","version":"0.1.3","repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"main":"index.js","scripts":{"test":"tap test/*.js"},"author":{"name":"Ryan Day","email":"soldair@gmail.com"},"dependencies":{},"devDependencies":{"tap":"~0.4.1"},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nbinarysearch\n============\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([0,1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([,1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to search value\n  - if the value is in the array it returns the first index with that value in the array\n  - if the value is not the index in the array of the closest item that sorts immediately before this item will be returned.\n    - +1 is the index where you should set this item into the array if you want to add it.\n    - if index 0 is the closest match -i will be returmed.\n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\nbs.closest([1,2,4,5,6],0) === -1\nbs.closest([1,2,4,5,6],200) === 6\n\n```\n\nquery for range (inclusive)\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\nsearch with object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n// [{k:'b',v:11},{k:a,v:22}];\n\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","readmeFilename":"README.md","_id":"binarysearch@0.1.3","dist":{"shasum":"f617962b863a1160922383e5833d0b05deec79f0","tarball":"http://registry.npmjs.org/binarysearch/-/binarysearch-0.1.3.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"soldair","email":"soldair@gmail.com"},"maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"directories":{}},"0.1.4":{"name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","version":"0.1.4","repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"main":"index.js","scripts":{"test":"tap test/*.js"},"author":{"name":"Ryan Day","email":"soldair@gmail.com"},"dependencies":{},"devDependencies":{"tap":"~0.4.1"},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nbinarysearch\n============\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([0,1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([,1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to where or key of searched value in the array\n  - if the key is in the array the key will point to\n    - the first key that has that value by default\n    - the last key that has that value if {end:true} option is specified\n  - only returns -1 if array is empty \n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\nbs.closest([1,2,4,5,6],0) === 0\nbs.closest([1,2,4,5,6],200) === 6\n\n// non unique matching/matching at end of series\nbs.closest([1,2,4,5,5,5,6],5) === 3\nbs.closest([1,2,4,5,5,5,6],5,{end:true}) === 5\n\n```\n\nquery for range (inclusive). returns sliced values.\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\ncreate an object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\n```\n\nsearch an object index\n\n```js\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\n// [{k:'b',v:11},{k:'a',v:22}];\n\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","readmeFilename":"README.md","_id":"binarysearch@0.1.4","dist":{"shasum":"ce616bb0029c0ed837f38a814c4f4d31fa05204a","tarball":"http://registry.npmjs.org/binarysearch/-/binarysearch-0.1.4.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"soldair","email":"soldair@gmail.com"},"maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"directories":{}},"0.1.5":{"name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","version":"0.1.5","repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"main":"index.js","scripts":{"test":"tap test/*.js"},"author":{"name":"Ryan Day","email":"soldair@gmail.com"},"dependencies":{},"devDependencies":{"tap":"~0.4.1"},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nbinarysearch\n============\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([0,1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([,1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to where or key of searched value in the array\n  - if the key is in the array the key will point to\n    - the first key that has that value by default\n    - the last key that has that value if {end:true} option is specified\n  - only returns -1 if array is empty \n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\nbs.closest([1,2,4,5,6],0) === 0\nbs.closest([1,2,4,5,6],200) === 6\n\n// non unique matching/matching at end of series\nbs.closest([1,2,4,5,5,5,6],5) === 3\nbs.closest([1,2,4,5,5,5,6],5,{end:true}) === 5\n\n```\n\nquery for range (inclusive). returns sliced values.\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\ninsert a value into a sorted array.\n\n```js\nvar arr = [1,3,4];\nbs.insert(arr,2) === 1\n// returns the key it inserted into \n\narr[1] === 2\n// true\n \n```\nwhen you insert values and there are duplicates the default behavior is to insert the new value after the other same values.\nif you pass option.unique = true the key's value is replaced with the new value\n\n```js\nvar arr = [1,2,3];\nbs.insert(arr,2)\n// arr is [1,2,2,3]\n\nvar arr = [1,2,3];\nbs.insert(arr,2,{unique:true});\n// arr is [1,2,3]\n \n```\n\ncreate an object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\n```\n\nsearch an object index\n\n```js\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\n// [{k:'b',v:11},{k:'a',v:22}];\n\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","readmeFilename":"README.md","_id":"binarysearch@0.1.5","dist":{"shasum":"c12c9e02f00c49b5ea486330e6d09e26200700c9","tarball":"http://registry.npmjs.org/binarysearch/-/binarysearch-0.1.5.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"soldair","email":"soldair@gmail.com"},"maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"directories":{}},"0.2.0":{"name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","version":"0.2.0","repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"main":"index.js","scripts":{"test":"tap test/*.js"},"author":{"name":"Ryan Day","email":"soldair@gmail.com"},"dependencies":{},"devDependencies":{"tap":"~0.4.1"},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nbinarysearch\n============\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([0,1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([,1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to where or key of searched value in the array\n  - if the key is in the array the key will point to\n    - the first key that has that value by default\n    - the last key that has that value if {end:true} option is specified\n  - only returns -1 if array is empty \n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\nbs.closest([1,2,4,5,6],0) === 0\nbs.closest([1,2,4,5,6],200) === 6\n\n// non unique matching/matching at end of series\nbs.closest([1,2,4,5,5,5,6],5) === 3\nbs.closest([1,2,4,5,5,5,6],5,{end:true}) === 5\n\n```\n\nquery for rangeValue (inclusive). returns sliced values.\n\n```js\nbs.rangeValue([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\nor simply access the array offsets directly as [start,end]\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [2,6]\n\n```\n\ninsert a value into a sorted array.\n\n```js\nvar arr = [1,3,4];\nbs.insert(arr,2) === 1\n// returns the key it inserted into \n\narr[1] === 2\n// true\n \n```\nwhen you insert values and there are duplicates the default behavior is to insert the new value after the other same values.\nif you pass option.unique = true the key's value is replaced with the new value\n\n```js\nvar arr = [1,2,3];\nbs.insert(arr,2)\n// arr is [1,2,2,3]\n\nvar arr = [1,2,3];\nbs.insert(arr,2,{unique:true});\n// arr is [1,2,3]\n \n```\n\ncreate an object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\n```\n\nsearch an object index\n\n```js\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\n// [{k:'b',v:11},{k:'a',v:22}];\n\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","readmeFilename":"README.md","_id":"binarysearch@0.2.0","dist":{"shasum":"bb986c2623ed839a71249ab771c171b7d01eae4a","tarball":"http://registry.npmjs.org/binarysearch/-/binarysearch-0.2.0.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"soldair","email":"soldair@gmail.com"},"maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"directories":{}},"0.2.1":{"name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","version":"0.2.1","repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"main":"index.js","scripts":{"test":"tap test/*.js"},"author":{"name":"Ryan Day","email":"soldair@gmail.com"},"dependencies":{},"devDependencies":{"tap":"~0.4.1"},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nbinarysearch\n============\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([0,1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([,1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to where or key of searched value in the array\n  - if the key is in the array the key will point to\n    - the first key that has that value by default\n    - the last key that has that value if {end:true} option is specified\n  - only returns -1 if array is empty \n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\nbs.closest([1,2,4,5,6],0) === 0\nbs.closest([1,2,4,5,6],200) === 6\n\n// non unique matching/matching at end of series\nbs.closest([1,2,4,5,5,5,6],5) === 3\nbs.closest([1,2,4,5,5,5,6],5,{end:true}) === 5\n\n```\n\nquery for rangeValue (inclusive). returns sliced values.\n\n```js\nbs.rangeValue([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\nor simply access the array offsets directly as [start,end]\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [2,6]\n\n```\n\ninsert a value into a sorted array.\n\n```js\nvar arr = [1,3,4];\nbs.insert(arr,2) === 1\n// returns the key it inserted into \n\narr[1] === 2\n// true\n \n```\nwhen you insert values and there are duplicates the default behavior is to insert the new value after the other same values.\nif you pass option.unique = true the key's value is replaced with the new value\n\n```js\nvar arr = [1,2,3];\nbs.insert(arr,2)\n// arr is [1,2,2,3]\n\nvar arr = [1,2,3];\nbs.insert(arr,2,{unique:true});\n// arr is [1,2,3]\n \n```\n\ncreate an object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\n```\n\nsearch an object index\n\n```js\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\n// [{k:'b',v:11},{k:'a',v:22}];\n\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/soldair/node-binarysearch/issues"},"_id":"binarysearch@0.2.1","dist":{"shasum":"1f2cab0a64a9b3b33e033b4a72d2761fe133a698","tarball":"http://registry.npmjs.org/binarysearch/-/binarysearch-0.2.1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"soldair","email":"soldair@gmail.com"},"maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"directories":{}},"0.2.2":{"name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","version":"0.2.2","repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"main":"index.js","scripts":{"test":"tap test/*.js"},"author":{"name":"Ryan Day","email":"soldair@gmail.com"},"dependencies":{},"devDependencies":{"tap":"~0.4.1"},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nbinarysearch\n============\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([0,1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([,1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to where or key of searched value in the array\n  - if the key is in the array the key will point to\n    - the first key that has that value by default\n    - the last key that has that value if {end:true} option is specified\n  - only returns -1 if array is empty \n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\nbs.closest([1,2,4,5,6],0) === 0\nbs.closest([1,2,4,5,6],200) === 6\n\n// non unique matching/matching at end of series\nbs.closest([1,2,4,5,5,5,6],5) === 3\nbs.closest([1,2,4,5,5,5,6],5,{end:true}) === 5\n\n```\n\nquery for rangeValue (inclusive). returns sliced values.\n\n```js\nbs.rangeValue([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\nor simply access the array offsets directly as [start,end]\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [2,6]\n\n```\n\ninsert a value into a sorted array.\n\n```js\nvar arr = [1,3,4];\nbs.insert(arr,2) === 1\n// returns the key it inserted into \n\narr[1] === 2\n// true\n \n```\nwhen you insert values and there are duplicates the default behavior is to insert the new value after the other same values.\nif you pass option.unique = true the key's value is replaced with the new value\n\n```js\nvar arr = [1,2,3];\nbs.insert(arr,2)\n// arr is [1,2,2,3]\n\nvar arr = [1,2,3];\nbs.insert(arr,2,{unique:true});\n// arr is [1,2,3]\n \n```\n\ncreate an object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\n```\n\nsearch an object index\n\n```js\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\n// [{k:'b',v:11},{k:'a',v:22}];\n\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/soldair/node-binarysearch/issues"},"_id":"binarysearch@0.2.2","dist":{"shasum":"abcda8f36ef4ad783f4417a960e1a31625441af6","tarball":"http://registry.npmjs.org/binarysearch/-/binarysearch-0.2.2.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"soldair","email":"soldair@gmail.com"},"maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"directories":{}},"0.2.3":{"name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","version":"0.2.3","repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"main":"index.js","scripts":{"test":"tap test/*.js"},"author":{"name":"Ryan Day","email":"soldair@gmail.com"},"dependencies":{},"devDependencies":{"tap":"~0.4.1"},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nbinarysearch\n============\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([0,1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([,1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to where or key of searched value in the array\n  - if the key is in the array the key will point to\n    - the first key that has that value by default\n    - the last key that has that value if {end:true} option is specified\n  - only returns -1 if array is empty \n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\nbs.closest([1,2,4,5,6],0) === 0\nbs.closest([1,2,4,5,6],200) === 6\n\n// non unique matching/matching at end of series\nbs.closest([1,2,4,5,5,5,6],5) === 3\nbs.closest([1,2,4,5,5,5,6],5,{end:true}) === 5\n\n```\n\nquery for rangeValue (inclusive). returns sliced values.\n\n```js\nbs.rangeValue([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\nor simply access the array offsets directly as [start,end]\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [2,6]\n\n```\n\ninsert a value into a sorted array.\n\n```js\nvar arr = [1,3,4];\nbs.insert(arr,2) === 1\n// returns the key it inserted into \n\narr[1] === 2\n// true\n \n```\nwhen you insert values and there are duplicates the default behavior is to insert the new value after the other same values.\nif you pass option.unique = true the key's value is replaced with the new value\n\n```js\nvar arr = [1,2,3];\nbs.insert(arr,2)\n// arr is [1,2,2,3]\n\nvar arr = [1,2,3];\nbs.insert(arr,2,{unique:true});\n// arr is [1,2,3]\n \n```\n\ncreate an object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\n```\n\nsearch an object index\n\n```js\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\n// [{k:'b',v:11},{k:'a',v:22}];\n\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/soldair/node-binarysearch/issues"},"_id":"binarysearch@0.2.3","dist":{"shasum":"1a3edb3d2f096ef5dc204ab4a0c3962a409e623f","tarball":"http://registry.npmjs.org/binarysearch/-/binarysearch-0.2.3.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"soldair","email":"soldair@gmail.com"},"maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"directories":{}},"0.2.4":{"name":"binarysearch","description":"pure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.","version":"0.2.4","repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"main":"index.js","scripts":{"test":"tap test/*.js"},"contributors":[{"name":"Ryan Day","email":"soldair@gmail.com"},{"name":"Nicolas LaCasse","email":"nicolas.lacasse@gmail.com","url":"https://github.com/nlacasse"}],"dependencies":{},"devDependencies":{"tap":"~0.4.1"},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nbinarysearch\n============\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([0,1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([,1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to where or key of searched value in the array\n  - if the key is in the array the key will point to\n    - the first key that has that value by default\n    - the last key that has that value if {end:true} option is specified\n  - only returns -1 if array is empty \n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\nbs.closest([1,2,4,5,6],0) === 0\nbs.closest([1,2,4,5,6],200) === 6\n\n// non unique matching/matching at end of series\nbs.closest([1,2,4,5,5,5,6],5) === 3\nbs.closest([1,2,4,5,5,5,6],5,{end:true}) === 5\n\n```\n\nquery for rangeValue (inclusive). returns sliced values.\n\n```js\nbs.rangeValue([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\nor simply access the array offsets directly as [start,end]\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [2,6]\n\n```\n\ninsert a value into a sorted array.\n\n```js\nvar arr = [1,3,4];\nbs.insert(arr,2) === 1\n// returns the key it inserted into \n\narr[1] === 2\n// true\n \n```\nwhen you insert values and there are duplicates the default behavior is to insert the new value after the other same values.\nif you pass option.unique = true the key's value is replaced with the new value\n\n```js\nvar arr = [1,2,3];\nbs.insert(arr,2)\n// arr is [1,2,2,3]\n\nvar arr = [1,2,3];\nbs.insert(arr,2,{unique:true});\n// arr is [1,2,3]\n \n```\n\ncreate an object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\n```\n\nsearch an object index\n\n```js\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\n// [{k:'b',v:11},{k:'a',v:22}];\n\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/soldair/node-binarysearch/issues"},"_id":"binarysearch@0.2.4","dist":{"shasum":"46ef3e03fd4529e9328662e68e40328e7a0bf2ac","tarball":"http://registry.npmjs.org/binarysearch/-/binarysearch-0.2.4.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"soldair","email":"soldair@gmail.com"},"maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"directories":{}}},"readme":"\n[![Build Status](https://secure.travis-ci.org/soldair/node-binarysearch.png)](http://travis-ci.org/soldair/node-binarysearch)\n\nnode-binarysearch\n=================\n\npure js binary search for sorted javascript arrays||array like objects. returns any || last || first || closest matched key for value, or slice between 2 values where values need not exist.\n\nreturns the matched key or -1 if not found.\n\nexample\n=======\n\n```js\n\nvar bs = require('binarysearch');\n\nbs([1,4,7,9,22,100,1000],7) === 2\n//true\n\nbs([1],5) === -1\n// true\n\n```\n\nsearch with user defined comparitor function\n\n```js\nbs([5,6,7,8,9],9,function(value,find){\n  if(value > find) return 1;\n  else if(value < find) return -1;\n  return 0;\n}) === 4\n// true\n\n```\n\nfind first key that matches\n\n```js\nbs.first([1,2,3,3,3,4],3) === 2\n\n```\n\nfind last key that matches\n\n```js\nbs.last([1,2,3,3,3,4],3) === 4\n \n```\n\nfind closest key to search value\n\n```js\n\nbs.closest([1,2,4,5,6],3) === 1\n\n```\n\nquery for range (inclusive)\n\n```js\nbs.range([1,2,3,3,3,4,4,6],3,5) === [3,3,3,4,4]\n\n```\n\nsearch with object index\n\n```js\n\nvar index = bs.indexObject({a:2,b:1});\n// [{k:'b',v:1},{k:a,v:2}];\n\nvar obj = {a:{id:22,name:'bob'},b:{id:11,name:'joe'}};\nindex = bs.indexObject(obj,function(o1,o2){\n  if(o1.id > o2.id) return 1\n  else if(o1.id < o2.id) return -1;\n  return 0; \n});\n// [{k:'b',v:11},{k:a,v:22}];\n\n\nobj[bs(index,'bob').k] === {id:22,name:'bob'};\n\n```\n\n\n\nthanks\n======\n\n@rvagg https://github.com/rvagg for making leveldb bindings for node these search functions emulate leveldb query behavior.\n\n\n","maintainers":[{"name":"soldair","email":"soldair@gmail.com"}],"time":{"modified":"2013-11-12T01:18:01.322Z","created":"2013-03-26T00:03:48.559Z","0.1.0":"2013-03-26T00:03:49.758Z","0.1.1":"2013-03-26T00:56:03.844Z","0.1.2":"2013-03-26T19:17:01.765Z","0.1.3":"2013-03-27T01:59:53.542Z","0.1.4":"2013-03-27T16:30:28.270Z","0.1.5":"2013-04-04T02:04:35.130Z","0.2.0":"2013-04-08T22:25:06.279Z","0.2.1":"2013-08-03T14:42:53.687Z","0.2.2":"2013-11-10T20:11:47.694Z","0.2.3":"2013-11-12T00:01:45.090Z","0.2.4":"2013-11-12T01:18:01.321Z"},"author":{"name":"Ryan Day","email":"soldair@gmail.com"},"repository":{"url":"git://github.com/soldair/node-binarysearch.git"},"_attachments":{},"_etag":"\"EXSREV4G61NO0N8UC8Y1FH2WJ\""}